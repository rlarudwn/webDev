<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sist.mapper.emp-mapper">
  <!-- JOIN : 포함클래스 (has-a) -->
  <!-- 
       while(rs.next())
       {
          EmpVO vo=new EmpVO();
          vo.setEmpno(rs.getString(1))
          ..
          vo.getDvo().setDname(rs.getString(7))
          =====================
       }
       
       SELECT empno,ename,job
       SELECT ename,job,empno
   -->
   <resultMap type="com.sist.vo.EmpVO" id="empMap">
     <result property="dvo.dname" column="dname"/>
     <!-- 
         vo.getDvo().setDname(rs.getString("dname"))
      -->
     <result property="dvo.loc" column="loc"/>
     <!-- 
         vo.getDvo().setLoc(rs.getString("loc"))
      -->
     <!-- 
         <result property="ename" column="ename"/>
         vo.setEname(rs.getString("ename"))
      -->
      <result property="svo.grade" column="grade"/>
   </resultMap>
   <select id="empListData" resultMap="empMap">
    SELECT empno,ename,job,TO_CHAR(hiredate,'YYYY-MM-DD') as dbday,
           sal,emp.deptno,dname,loc,grade
    FROM emp,dept,salgrade
    WHERE emp.deptno=dept.deptno
    AND sal BETWEEN losal AND hisal
   </select>
   <select id="empFindData" resultType="EmpVO" parameterType="hashmap">
     SELECT empno,ename,job,TO_CHAR(hiredate,'YYYY-MM-DD') as dbday,
            sal,deptno,comm
     FROM emp 
     <!-- 
        WHERE ename IN('','','','',''...)
        
        trim : 1. 추가 , 2. 삭제 (제거) 
               prefix : 처음 추가 => 접두어
               suffix : 마지막 추가 => 접미어 
               suffixOverrides => 뒤에 데이터 제거 
               prefixOverrides => 앞에 데이터 제거 
        SELECT * FROM emp
        WHERE  
       <trim  prefixOverrides="OR">
        <if test="column=='name'">
          OR name LIKE ~
        </if>
        <if test="column=='subject'">
          OR subject LIKE ~
        </if>
        <if test="column=='content'">
          OR content LIKE ~
        </if>
       </trim>
       
       WHERE ename IN('','','',''...)
       [CLARK, JONES, ALLEN, TURNER, WARD, FORD, SMITH, SCOTT, ADAMS, MILLER]
       
       IN연산자 = <foreach>
       
       동적 쿼리 
         <trim> : 추가 / 제거 
                  WHERE ename (추가)
                  <trim prefix="LIKE">
                  WHERE ename LIKE '%'||#{name}||'%' OR
                  <trim suffixOverrides="OR">
                        ================ 제거 
         <foreach> : => IN(여기에 들어가는 데이터)
           <foreach collection="nameArr" item="name" close=")" separator="," open="(">
                    ==================== =========== ========= ==============
                          |                  값 읽기     끝나면 )       데이터,데이터..  (
                        배열 / List => Map => 키명
                     for(String name:배열)
                         =========== ===
                           item      collection
         <if> : 조건문 
                <if test="조건문">
                  수행할 SQL문장
                </if>
         <choose> : 다중 조건문 
             <choose>
               <when test="조건문">SQL</when>
               <when test="조건문">SQL</when>
               <when test="조건문">SQL</when>
               <when test="조건문">SQL</when>
               <when test="조건문">SQL</when>
               <otherwise>기타</otherwise>
             </choose>
         <where> : where문장 => WHERE
         <set> : UPDATE 
         
         FROM emp WHERE ename IN('','',...)
         동적 쿼리 => 사용자의 요청에 따라 SQL문장을 변경 
         *** MyBatis의 핵심 
      -->
      <trim prefix="WHERE ename IN(" suffix=")" suffixOverrides=")">
        <foreach collection="nameArr" item="name" close=")" separator=",">
         #{name}
        </foreach>
      </trim>
   </select>
   <select id="empEnameList" resultType="String">
     SELECT ename FROM emp
   </select>
</mapper>




